type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Stats.java
  visible: true
  text: |
    package cinema;

    import java.util.Map;

    public class Stats {
        private int currentIncome;
        private int numberOfAvailableSeats;
        private int numberOfPurchasedTickets;

        public Stats() {

        }

        public Stats(Orders orders, Seats seats) {
            Map<Integer, Order> ordersMap = orders.getOrders();
            this.numberOfPurchasedTickets = ordersMap.size();
            this.numberOfAvailableSeats = seats.getAvailableSeats().length - this.numberOfPurchasedTickets;
            int currentIncome = 0;
            for (Order order : ordersMap.values()) {
                currentIncome += order.getTicket().getPrice();
            }
            this.currentIncome = currentIncome;
        }

        public int getNumberOfAvailableSeats() {
            return this.numberOfAvailableSeats;
        }

        public int getNumberOfPurchasedTickets() {
            return this.numberOfPurchasedTickets;
        }

        public int getCurrentIncome() {
            return this.currentIncome;
        }
    }
  learner_created: true
- name: src/cinema/ResponseReturn.java
  visible: true
  text: |
    package cinema;

    public class ResponseReturn {
        private Seat returnedTicket;

        public ResponseReturn(Seat seat) {
            this.returnedTicket = seat;
        }

        public ResponseReturn() {

        }

        public Seat getReturnedTicket() {
            return this.returnedTicket;
        }
    }
  learner_created: true
- name: src/cinema/PurchaseException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class PurchaseException extends RuntimeException{
        public PurchaseException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/DefaultAdvice.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    @ControllerAdvice
    public class DefaultAdvice {
        @ExceptionHandler(PurchaseException.class)
        public ResponseEntity<ErrorResponse> handlePurchase(PurchaseException e){
            ErrorResponse response = new ErrorResponse(e.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(StatsException.class)
        public ResponseEntity<ErrorResponse> handleStats(StatsException e){
            ErrorResponse response = new ErrorResponse(e.getMessage());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }
    }
  learner_created: true
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
        private int row;
        private int column;
        private int price;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public Seat() {
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public void setPrice(int price) {
            this.price = price;
        }
    }
  learner_created: true
- name: src/cinema/Order.java
  visible: true
  text: |
    package cinema;

    import java.util.UUID;

    public class Order {
        private final UUID token = UUID.randomUUID();
        private Seat ticket;

        public Order(Seat seat) {
            this.ticket = seat;
        }

        public Order() {

        }

        public UUID getToken() {
            return this.token;
        }

        public Seat getTicket() {
            return this.ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/Orders.java
  visible: true
  text: |
    package cinema;

    import java.util.Map;
    import java.util.HashMap;

    public class Orders {
        private final Map<Integer, Order> orders = new HashMap<>();

        private Orders() {

        }

        public static int getOrderKey(Seat seat) {
            return seat.getRow() * 9 + seat.getColumn();
        }

        public Order purchase(Seat ticket) {
            Order order = new Order(ticket);
            this.orders.put(Orders.getOrderKey(ticket), order);
            return order;
        }

        public boolean checkTicket(Seat ticket) {
            return orders.containsKey(Orders.getOrderKey(ticket));
        }

        public Order getOrderByToken(String token) {
            for (Order order : this.orders.values()) {
                if (order.getToken().toString().equals(token)){
                    return order;
                }
            }

            return null;
        }

        public void deleteOrder(Order order) {
            Seat ticket = order.getTicket();
            this.orders.remove(Orders.getOrderKey(ticket));
        }

        public Map<Integer, Order> getOrders() {
            return this.orders;
        }

        private static class SingletonHolder {
            public static final Orders HOLDER_INSTANCE = new Orders();
        }

        public static Orders getInstance() {
            return Orders.SingletonHolder.HOLDER_INSTANCE;
        }
    }
  learner_created: true
- name: src/cinema/Seats.java
  visible: true
  text: |
    package cinema;

    public class Seats {
        private final int totalRows = 9;
        private final int totalColumns = 9;
        private final Seat[] seats = new Seat[this.totalColumns * this.totalRows];

        public int getTotalColumns() {
            return totalColumns;
        }

        public int getTotalRows() {
            return totalRows;
        }

        public static void setSeatPrice(Seat seat) {
            seat.setPrice(seat.getRow() < 5 ? 10 : 8);
        }

        public Seat[] getAvailableSeats(){
            return this.seats;
        }

        public Seats() {
            for (int i = 0; i < this.totalRows; i++) {
                for (int j = 0; j < this.totalColumns; j++) {
                    Seat seat = new Seat(i + 1, j + 1);
                    Seats.setSeatPrice(seat);

                    this.seats[i * 9 + j] = seat;
                }
            }
        }

        public Seat findSeat(int row, int column) {
            return this.seats[(row - 1) * 9 + column - 1];
        }
    }
  learner_created: true
- name: src/cinema/Controller.java
  visible: true
  text: |
    package cinema;

    import org.springframework.web.bind.annotation.*;

    @RestController
    public class Controller {
        private final Orders orders = Orders.getInstance();
        private final Seats seats = new Seats();

        @GetMapping("/seats")
        public Seats getSeats() {
            return this.seats;
        }

        @PostMapping("/purchase")
        public Order purchase(@RequestBody Seat requestedSeat) {
            Seat[] availableSeats = this.seats.getAvailableSeats();
            int requestedRow = requestedSeat.getRow();
            int requestedColumn = requestedSeat.getColumn();
            if (
                requestedRow > this.seats.getTotalRows() ||
                requestedRow < 1 ||
                requestedColumn > this.seats.getTotalColumns() ||
                requestedColumn < 1
            ) {
                throw new PurchaseException("The number of a row or a column is out of bounds!");
            }
            Seat seat = this.seats.findSeat(requestedRow, requestedColumn);
            if (orders.checkTicket(seat)) {
                throw new PurchaseException("The ticket has been already purchased!");
            }

            return orders.purchase(seat);
        }

        @PostMapping("/return")
        public ResponseReturn handleReturn(@RequestBody RequestReturn request) {
            Order order = this.orders.getOrderByToken(request.getToken());
            if (order != null) {
                this.orders.deleteOrder(order);
                return new ResponseReturn(order.getTicket());
            }

            throw new PurchaseException("Wrong token!");
        }

        @PostMapping("/stats")
        public Stats handleStats(@RequestParam(defaultValue = "") String password) {
            if ("super_secret".equals(password)) {
                return new Stats(this.orders, this.seats);
            }

            throw new StatsException("The password is wrong!");
        }
    }
  learner_created: true
- name: src/cinema/ErrorResponse.java
  visible: true
  text: |
    package cinema;

    public class ErrorResponse {
        private String error;

        public ErrorResponse() {}

        public ErrorResponse(String error){
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/RequestReturn.java
  visible: true
  text: |
    package cinema;

    public class RequestReturn {
        private String token;

        public RequestReturn() {

        }

        public void setToken(String token) {
            this.token = token;
        }

        public String getToken() {
            return this.token;
        }
    }
  learner_created: true
- name: src/cinema/StatsException.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.UNAUTHORIZED)
    public class StatsException extends RuntimeException{
        public StatsException(String cause) {
            super(cause);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 09 Mar 2022 10:23:14 UTC
record: -1
